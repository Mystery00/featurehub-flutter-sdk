part of featurehub_client_api.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.
// this project is maintained as part of FeatureHub - please consider sponsoring us at https://github.com/featurehub-io

class InfoServiceApi {
  final InfoServiceApiDelegate apiDelegate;
  InfoServiceApi(ApiClient apiClient)
      : apiDelegate = InfoServiceApiDelegate(apiClient);

  ///
  ///
  /// Gets information as to what this server is.
  Future<ApplicationVersionInfo> getInfoVersion({Options? options}) async {
    final response = await apiDelegate.getInfoVersion(
      options: options,
    );

    if (![200].contains(response.statusCode)) {
      throw ApiException(500,
          'Invalid response code ${response.statusCode} returned from API');
    }

    final __body = response.body;
    if (response.statusCode >= 400) {
      throw ApiException(response.statusCode,
          __body == null ? null : await decodeBodyBytes(__body));
    }

    if (__body == null) {
      throw ApiException(500, 'Received an empty body (not in a 204)');
    }

    return await apiDelegate.getInfoVersion_decode(__body);
  }

  ///
  ///
  /// Gets information as to what this server is.
}

class InfoServiceApiDelegate {
  final ApiClient apiClient;

  InfoServiceApiDelegate(this.apiClient);

  Future<ApiResponse> getInfoVersion({Options? options}) async {
    // create path and map variables
    final __path = '/info/version';

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}
      ..addAll(options?.headers?.cast<String, String>() ?? {});
    if (!headerParams.containsKey('Accept')) {
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
    }

    final authNames = <String>[];
    final opt = options ?? Options();

    final contentTypes = [];

    if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
    }

    headerParams
        .removeWhere((key, value) => value.isEmpty); // remove empty headers
    opt.headers = headerParams;
    opt.method = 'GET';

    return await apiClient.invokeAPI(__path, queryParams, null, authNames, opt);
  }

  Future<ApplicationVersionInfo> getInfoVersion_decode(
      Stream<List<int>> body) async {
    return LocalApiClient.deserializeFromString(
            await utf8.decodeStream(body), 'ApplicationVersionInfo')
        as ApplicationVersionInfo;
  }
}
