part of featurehub_client_api.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.
// this project is maintained as part of FeatureHub - please consider sponsoring us at https://github.com/featurehub-io

// FeatureState
class FeatureState {
  String id;

  String key;
  /* Is this feature locked. Usually this doesn't matter because the value is the value, but for FeatureInterceptors it can matter. */
  bool? l;
  /* The version of the feature, this allows features to change values and it means we don't trigger events */
  int? version;

  FeatureValueType? type;
  /* the current value */
  dynamic value;
  /* This field is filled in from the client side in the GET api as the GET api is able to request multiple environments. It is never passed from the server, as an array of feature states is wrapped in an environment. */
  String? environmentId;

  List<FeatureRolloutStrategy> strategies = const [];

  FeatureState(
      {required this.id,
      required this.key,
      this.l,
      this.version,
      this.type,
      this.value,
      this.environmentId,
      List<FeatureRolloutStrategy>? strategies})
      : this.strategies = strategies ?? [];

  @override
  String toString() {
    return 'FeatureState[id=$id, key=$key, l=$l, version=$version, type=$type, value=$value, environmentId=$environmentId, strategies=$strategies, ]';
  }

  static String fromJson_id(Map<String, dynamic> json) {
    final _jsonData = json[r'id'];
    if (_jsonData == null) {
      throw DeserialisationError(
          json, r'id', r'', 'id field is null and is required to have a value');
    }

    return (json[r'id'] as String); // sausage
  }

  static String fromJson_key(Map<String, dynamic> json) {
    final _jsonData = json[r'key'];
    if (_jsonData == null) {
      throw DeserialisationError(json, r'key', r'',
          'key field is null and is required to have a value');
    }

    return (json[r'key'] as String); // sausage
  }

  static bool? fromJson_l(Map<String, dynamic> json) {
    return (json[r'l'] == null) ? null : json[r'l'] as bool?;
  }

  static int? fromJson_version(Map<String, dynamic> json) {
    return (json[r'version'] == null) ? null : json[r'version'].toInt();
  }

  static FeatureValueType? fromJson_type(Map<String, dynamic> json) {
    return (json[r'type'] == null)
        ? null
        : FeatureValueTypeExtension.fromJson(json[r'type']);
  }

  static dynamic fromJson_value(Map<String, dynamic> json) {
    return json[r'value'];
  }

  static String? fromJson_environmentId(Map<String, dynamic> json) {
    return (json[r'environmentId'] == null)
        ? null
        : json[r'environmentId'] as String?;
  }

  static List<FeatureRolloutStrategy> fromJson_strategies(
      Map<String, dynamic> json) {
    final _jsonData = json[r'strategies'];
    if (_jsonData == null) {
      return const [];
    }
    return (_jsonData == null)
        ? []
        : ((dynamic data) {
            return FeatureRolloutStrategy.listFromJson(data);
          }(_jsonData));
  }

  FeatureState.fromJson(Map<String, dynamic> json)
      : this.id = fromJson_id(json),
        this.key = fromJson_key(json),
        this.l = fromJson_l(json),
        this.version = fromJson_version(json),
        this.type = fromJson_type(json),
        this.value = fromJson_value(json),
        this.environmentId = fromJson_environmentId(json),
        this.strategies = fromJson_strategies(json);

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    json[r'id'] = id;
    json[r'key'] = key;
    if (l != null) {
      json[r'l'] = l;
    }
    if (version != null) {
      json[r'version'] = version;
    }
    if (type != null) {
      json[r'type'] = type?.toJson();
    }
    if (value != null) {
      json[r'value'] = value;
    }
    if (environmentId != null) {
      json[r'environmentId'] = environmentId;
    }
    if (strategies.isNotEmpty) {
      json[r'strategies'] =
          ((v) => v.map((v) => v.toJson()).toList())(strategies);
    }
    return json;
  }

  static List<FeatureState> listFromJson(List<dynamic>? json) {
    return json == null
        ? <FeatureState>[]
        : json.map((value) => FeatureState.fromJson(value)).toList();
  }

  static Map<String, FeatureState> mapFromJson(Map<String, dynamic>? json) {
    final map = <String, FeatureState>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) =>
          map[key] = FeatureState.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is FeatureState && runtimeType == __other.runtimeType) {
      return id == __other.id &&
          key == __other.key &&
          l == __other.l &&
          version == __other.version &&
          type == __other.type && // __other

          value == __other.value &&
          environmentId == __other.environmentId &&
          const ListEquality().equals(strategies, __other.strategies);
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    hashCode = hashCode * 31 + id.hashCode;

    hashCode = hashCode * 31 + key.hashCode;

    if (l != null) {
      hashCode = hashCode * 31 + l.hashCode;
    }

    if (version != null) {
      hashCode = hashCode * 31 + version.hashCode;
    }

    if (type != null) {
      hashCode = hashCode * 31 + type.hashCode;
    }

    if (value != null) {
      hashCode = hashCode * 31 + value.hashCode;
    }

    if (environmentId != null) {
      hashCode = hashCode * 31 + environmentId.hashCode;
    }

    if (strategies.isNotEmpty) {
      hashCode = hashCode * 31 + const ListEquality().hash(strategies);
    }

    return hashCode;
  }

  FeatureState copyWith({
    String? id,
    String? key,
    bool? l,
    int? version,
    FeatureValueType? type,
    dynamic value,
    String? environmentId,
    List<FeatureRolloutStrategy>? strategies,
  }) {
    final _copy_id = id ?? this.id;

    final _copy_key = key ?? this.key;

    final _copy_l = l ?? this.l;

    final _copy_version = version ?? this.version;

    final _copy_type = type ?? this.type;

    final _copy_value = value ?? this.value;

    final _copy_environmentId = environmentId ?? this.environmentId;

    final _copy_strategies = strategies ??
        ((List<FeatureRolloutStrategy> data) {
          return data.map((data) => data.copyWith()).toList();
        }(this.strategies));

    return FeatureState(
      id: _copy_id,
      key: _copy_key,
      l: _copy_l,
      version: _copy_version,
      type: _copy_type,
      value: _copy_value,
      environmentId: _copy_environmentId,
      strategies: _copy_strategies,
    );
  }
}
