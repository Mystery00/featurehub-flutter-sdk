part of featurehub_client_api.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.
// this project is maintained as part of FeatureHub - please consider sponsoring us at https://github.com/featurehub-io

// FeatureRolloutStrategyAttribute
class FeatureRolloutStrategyAttribute {
  RolloutStrategyAttributeConditional conditional;

  String fieldName;
  /* the value(s) associated with this rule */
  List<dynamic> values = const [];

  RolloutStrategyFieldType type;

  FeatureRolloutStrategyAttribute(
      {required this.conditional,
      required this.fieldName,
      List<dynamic>? values,
      required this.type})
      : this.values = values ?? [];

  @override
  String toString() {
    return 'FeatureRolloutStrategyAttribute[conditional=$conditional, fieldName=$fieldName, values=$values, type=$type, ]';
  }

  static RolloutStrategyAttributeConditional fromJson_conditional(
      Map<String, dynamic> json) {
    final _jsonData = json[r'conditional'];
    if (_jsonData == null) {
      throw DeserialisationError(json, r'conditional', r'',
          'conditional field is null and is required to have a value');
    }

    final _enumVal =
        RolloutStrategyAttributeConditionalExtension.fromJson(_jsonData);
    if (_enumVal == null)
      throw DeserialisationError(json, r'conditional', r'',
          'conditional field is null and is required to have a value');

    return _enumVal;
  }

  static String fromJson_fieldName(Map<String, dynamic> json) {
    final _jsonData = json[r'fieldName'];
    if (_jsonData == null) {
      throw DeserialisationError(json, r'fieldName', r'',
          'fieldName field is null and is required to have a value');
    }

    return (json[r'fieldName'] as String); // sausage
  }

  static List<dynamic> fromJson_values(Map<String, dynamic> json) {
    final _jsonData = json[r'values'];
    if (_jsonData == null) {
      return const [];
    }
    return (_jsonData == null)
        ? []
        : ((dynamic data) {
            return data;
          }(_jsonData));
  }

  static RolloutStrategyFieldType fromJson_type(Map<String, dynamic> json) {
    final _jsonData = json[r'type'];
    if (_jsonData == null) {
      throw DeserialisationError(json, r'type', r'',
          'type field is null and is required to have a value');
    }

    final _enumVal = RolloutStrategyFieldTypeExtension.fromJson(_jsonData);
    if (_enumVal == null)
      throw DeserialisationError(json, r'type', r'',
          'type field is null and is required to have a value');

    return _enumVal;
  }

  FeatureRolloutStrategyAttribute.fromJson(Map<String, dynamic> json)
      : this.conditional = fromJson_conditional(json),
        this.fieldName = fromJson_fieldName(json),
        this.values = fromJson_values(json),
        this.type = fromJson_type(json);

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    json[r'conditional'] = conditional.toJson();
    json[r'fieldName'] = fieldName;
    if (values.isNotEmpty) {
      json[r'values'] = ((v) => v.map((v) => v).toList())(values);
    }
    json[r'type'] = type.toJson();
    return json;
  }

  static List<FeatureRolloutStrategyAttribute> listFromJson(
      List<dynamic>? json) {
    return json == null
        ? <FeatureRolloutStrategyAttribute>[]
        : json
            .map((value) => FeatureRolloutStrategyAttribute.fromJson(value))
            .toList();
  }

  static Map<String, FeatureRolloutStrategyAttribute> mapFromJson(
      Map<String, dynamic>? json) {
    final map = <String, FeatureRolloutStrategyAttribute>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) =>
          map[key] = FeatureRolloutStrategyAttribute.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is FeatureRolloutStrategyAttribute &&
        runtimeType == __other.runtimeType) {
      return conditional == __other.conditional && // __other

          fieldName == __other.fieldName &&
          const ListEquality().equals(values, __other.values) &&
          type == __other.type;
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    hashCode = hashCode * 31 + conditional.hashCode;

    hashCode = hashCode * 31 + fieldName.hashCode;

    if (values.isNotEmpty) {
      hashCode = hashCode * 31 + const ListEquality().hash(values);
    }

    hashCode = hashCode * 31 + type.hashCode;

    return hashCode;
  }

  FeatureRolloutStrategyAttribute copyWith({
    RolloutStrategyAttributeConditional? conditional,
    String? fieldName,
    List<dynamic>? values,
    RolloutStrategyFieldType? type,
  }) {
    final _copy_conditional = conditional ?? this.conditional;

    final _copy_fieldName = fieldName ?? this.fieldName;

    final _copy_values = values ??
        ((List<dynamic> data) {
          return data.toList();
        }(this.values));

    final _copy_type = type ?? this.type;

    return FeatureRolloutStrategyAttribute(
      conditional: _copy_conditional,
      fieldName: _copy_fieldName,
      values: _copy_values,
      type: _copy_type,
    );
  }
}
