part of featurehub_client_api.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.
// this project is maintained as part of FeatureHub - please consider sponsoring us at https://github.com/featurehub-io

// FeatureEnvironmentCollection
class FeatureEnvironmentCollection {
  String id;

  List<FeatureState> features = const [];

  FeatureEnvironmentCollection({required this.id, List<FeatureState>? features})
      : this.features = features ?? [];

  @override
  String toString() {
    return 'FeatureEnvironmentCollection[id=$id, features=$features, ]';
  }

  static String fromJson_id(Map<String, dynamic> json) {
    final _jsonData = json[r'id'];
    if (_jsonData == null) {
      throw DeserialisationError(
          json, r'id', r'', 'id field is null and is required to have a value');
    }

    return (json[r'id'] as String); // sausage
  }

  static List<FeatureState> fromJson_features(Map<String, dynamic> json) {
    final _jsonData = json[r'features'];
    if (_jsonData == null) {
      return const [];
    }
    return (_jsonData == null)
        ? []
        : ((dynamic data) {
            return FeatureState.listFromJson(data);
          }(_jsonData));
  }

  FeatureEnvironmentCollection.fromJson(Map<String, dynamic> json)
      : this.id = fromJson_id(json),
        this.features = fromJson_features(json);

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    json[r'id'] = id;
    if (features.isNotEmpty) {
      json[r'features'] = ((v) => v.map((v) => v.toJson()).toList())(features);
    }
    return json;
  }

  static List<FeatureEnvironmentCollection> listFromJson(List<dynamic>? json) {
    return json == null
        ? <FeatureEnvironmentCollection>[]
        : json
            .map((value) => FeatureEnvironmentCollection.fromJson(value))
            .toList();
  }

  static Map<String, FeatureEnvironmentCollection> mapFromJson(
      Map<String, dynamic>? json) {
    final map = <String, FeatureEnvironmentCollection>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) =>
          map[key] = FeatureEnvironmentCollection.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is FeatureEnvironmentCollection &&
        runtimeType == __other.runtimeType) {
      return id == __other.id &&
          const ListEquality().equals(features, __other.features);
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    hashCode = hashCode * 31 + id.hashCode;

    if (features.isNotEmpty) {
      hashCode = hashCode * 31 + const ListEquality().hash(features);
    }

    return hashCode;
  }

  FeatureEnvironmentCollection copyWith({
    String? id,
    List<FeatureState>? features,
  }) {
    final _copy_id = id ?? this.id;

    final _copy_features = features ??
        ((List<FeatureState> data) {
          return data.map((data) => data.copyWith()).toList();
        }(this.features));

    return FeatureEnvironmentCollection(
      id: _copy_id,
      features: _copy_features,
    );
  }
}
