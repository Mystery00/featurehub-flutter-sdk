part of featurehub_client_api.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.
// this project is maintained as part of FeatureHub - please consider sponsoring us at https://github.com/featurehub-io

// BaseRolloutStrategyAttribute
class BaseRolloutStrategyAttribute {
  RolloutStrategyAttributeConditional? conditional;

  String? fieldName;
  /* the value(s) associated with this rule */
  List<dynamic> values = const [];

  RolloutStrategyFieldType? type;

  BaseRolloutStrategyAttribute(
      {this.conditional, this.fieldName, List<dynamic>? values, this.type})
      : this.values = values ?? [];

  @override
  String toString() {
    return 'BaseRolloutStrategyAttribute[conditional=$conditional, fieldName=$fieldName, values=$values, type=$type, ]';
  }

  static RolloutStrategyAttributeConditional? fromJson_conditional(
      Map<String, dynamic> json) {
    return (json[r'conditional'] == null)
        ? null
        : RolloutStrategyAttributeConditionalExtension.fromJson(
            json[r'conditional']);
  }

  static String? fromJson_fieldName(Map<String, dynamic> json) {
    return (json[r'fieldName'] == null) ? null : json[r'fieldName'] as String?;
  }

  static List<dynamic> fromJson_values(Map<String, dynamic> json) {
    final _jsonData = json[r'values'];
    if (_jsonData == null) {
      return const [];
    }
    return (_jsonData == null)
        ? []
        : ((dynamic data) {
            return data;
          }(_jsonData));
  }

  static RolloutStrategyFieldType? fromJson_type(Map<String, dynamic> json) {
    return (json[r'type'] == null)
        ? null
        : RolloutStrategyFieldTypeExtension.fromJson(json[r'type']);
  }

  BaseRolloutStrategyAttribute.fromJson(Map<String, dynamic> json)
      : this.conditional = fromJson_conditional(json),
        this.fieldName = fromJson_fieldName(json),
        this.values = fromJson_values(json),
        this.type = fromJson_type(json);

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (conditional != null) {
      json[r'conditional'] = conditional?.toJson();
    }
    if (fieldName != null) {
      json[r'fieldName'] = fieldName;
    }
    if (values.isNotEmpty) {
      json[r'values'] = ((v) => v.map((v) => v).toList())(values);
    }
    if (type != null) {
      json[r'type'] = type?.toJson();
    }
    return json;
  }

  static List<BaseRolloutStrategyAttribute> listFromJson(List<dynamic>? json) {
    return json == null
        ? <BaseRolloutStrategyAttribute>[]
        : json
            .map((value) => BaseRolloutStrategyAttribute.fromJson(value))
            .toList();
  }

  static Map<String, BaseRolloutStrategyAttribute> mapFromJson(
      Map<String, dynamic>? json) {
    final map = <String, BaseRolloutStrategyAttribute>{};
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) =>
          map[key] = BaseRolloutStrategyAttribute.fromJson(value));
    }
    return map;
  }

  @override
  bool operator ==(Object? __other) {
    if (identical(this, __other)) {
      return true;
    }

    if (__other is BaseRolloutStrategyAttribute &&
        runtimeType == __other.runtimeType) {
      return conditional == __other.conditional && // __other

          fieldName == __other.fieldName &&
          const ListEquality().equals(values, __other.values) &&
          type == __other.type;
    }

    return false;
  }

  @override
  int get hashCode {
    var hashCode = runtimeType.hashCode;

    if (conditional != null) {
      hashCode = hashCode * 31 + conditional.hashCode;
    }

    if (fieldName != null) {
      hashCode = hashCode * 31 + fieldName.hashCode;
    }

    if (values.isNotEmpty) {
      hashCode = hashCode * 31 + const ListEquality().hash(values);
    }

    if (type != null) {
      hashCode = hashCode * 31 + type.hashCode;
    }

    return hashCode;
  }

  BaseRolloutStrategyAttribute copyWith({
    RolloutStrategyAttributeConditional? conditional,
    String? fieldName,
    List<dynamic>? values,
    RolloutStrategyFieldType? type,
  }) {
    final _copy_conditional = conditional ?? this.conditional;

    final _copy_fieldName = fieldName ?? this.fieldName;

    final _copy_values = values ??
        ((List<dynamic> data) {
          return data.toList();
        }(this.values));

    final _copy_type = type ?? this.type;

    return BaseRolloutStrategyAttribute(
      conditional: _copy_conditional,
      fieldName: _copy_fieldName,
      values: _copy_values,
      type: _copy_type,
    );
  }
}
